##############################################################################################################################################################################
# Resource:http://www.broadleafcommerce.com/docs/core/current/broadleaf-concepts/key-aspects-and-configuration/features-and-architecture                                     #
# http://www.broadleafcommerce.com/docs/core/current/broadleaf-concepts                                                                                                      #
##############################################################################################################################################################################

CATALOG:
Broadleaf provides flexible product & category organization. Core feature of the framework is to provide ability to extend this
catalog to match the specific needs of the organization. We can manage the product & catagories using the admin UI module.

PROMOTION SYSTEM:
Highly flexible promotion system for your promotions, BLC admin can manage the following type of promotions.
    - Percent Off/Dollor Off/ Fixed Price
    - Order, Item, Shipping level promotions.
    - Buy one get one promotion.
    - Promotion based on the attribute of customer, cart, catalog.

CMS (Content Management System):
Support for end-user managed static pages.


+++++++++++++ Actual Broadleaf modules ++++++++++++++
-> broadleaf-common
    A collection of classes shared by common-modules.
-> broadleaf-framework
    Core broadleaf framework classes.
-> broadleaf-framework-web
    Spring MVC controllers and related items.
-> broadleaf-profile
    Customer profile related classes, utility classes, email, configuration merge
-> broadleaf-profile-web
    Spring MVC controllers and related items supporting the profile module
-> broadleaf-instrument
    Allows for runtime instrumentation to override certain Broadleaf annotations
-> broadleaf-open-admin-platform
    Framework for creating extensible administration GUIs for Hibernate managed domains
-> broadleaf-contentmanagement-module
    A full-featured content management system that is managed via the administration tool
-> broadleaf-admin-module
    Contents: Broadleaf Commerce specific administration module that plugs into the open admin platform

++++++++++++ Merge Configuraion ++++++++++++++
-> The configuration is being managed in the web.xml files.
-> There are two kinds of files mentioned in this web.xml under two different parameters
    - patchConfigLocation
        Core spring configuration based files.

    - contextConfigLocation
        Spring-MVC related configuration based files.

-> Now for merging configurations:
    Broadleaf has inbuilt intelligent capacity to merge the configuration of differnt properties file provided under the
    "patchConfigLocation" using a MergeConfigLoader specified as a listener as shown below.

    <listener>
        <listener-class>org.broadleafcommerce.common.web.extensibility.MergeContextLoaderListener</listener-class>
    </listener>

-> This listener uses two strategies to merge the configuration:


   Strategy 1: Set/List/Map FactoryBeans

   This is the newer of the two strategies in Broadleaf, and all new configuration is written in this pattern. The easiest way to show this strategy is by example. Let's take a look at some configuration that lives in a Broadleaf applicationContext file:

   <bean id="blDialectProcessors" class="org.springframework.beans.factory.config.SetFactoryBean">
       <property name="sourceSet">
           <set>
               <ref bean="blAddSortLinkProcessor" />
               <ref bean="blCategoriesProcessor" />
               ... other bean references ...
           </set>
       </property>
   </bean>
   <bean id="blDialect" class="org.broadleafcommerce.common.web.dialect.BLCDialect">
       <property name="processors" ref="blDialectProcessors" />
   </bean>

   What we have here is a bean called blDialect that has a property in it called processors which takes a Set of things that implement the Thymeleaf IProcessor. This applicationContext file also defines another bean called blDialectProcessors of type SetFactoryBean. This means that Spring will do some processing for this SetFactoryBean, and when it is injected into the processors property, it will be transformed into a Set.

   We are able to contribute an additional processor to this Set without copy-pasting the entire blDialectProcessors bean. We do so with the following configuration:

   <bean id="blDialectAdditionalProcessors" class="org.springframework.beans.factory.config.SetFactoryBean">
       <property name="sourceSet">
           <set>
               <ref bean="blAdditionalProcessorOne"/>
               <ref bean="blAdditionalProcessorTwo"/>
           </set>
       </property>
   </bean>
   <bean class="org.broadleafcommerce.common.extensibility.context.merge.LateStageMergeBeanPostProcessor">
       <property name="collectionRef" value="blDialectAdditionalProcessors" />
       <property name="targetRef" value="blDialectProcessors" />
   </bean>

   This additional configuration triggers the creation of a new bean, blDialectAdditionalProcessors that then defines two extra processors that we want to add to the blDialect processors property. Secondly, we define a LateStageMergeBeanPostProcessor that will merge our new bean into the existing bean. Then, when the existing bean is injected into blDialect, it will contain our extra entries.

   This strategy is applicable for adding entries into any pre-defined Broadleaf beans.


  NOTE:>>>>> ************* WE SHOULD MOSTLY USE THE FIRST STRATEGY.


############### Persistence Configuration ##################
-> Broadleaf uses 3 data sources by default.
-> webDS
    Main datasource containing most of the tables in the broadleaf.

-> webSecureDS
    This is to use to provide secure data storage in order to provide PCI compliance.

-> webContentDS


##### How to define custom persistence unit?
Additional Persistence Units

It may be necessary to define additional persistence units for your application (over and above those persistence units required by Broadleaf). Additional configuration is required to account for this. Here's how to achieve this.

In the blMergedDataSources bean defined above, we list various available datasources. First, we must add a new one:

<entry key="jdbc/myData" value-ref="myDS"/>

Second, you would add a new datasource bean. Again, you can use any method of acquiring a valid datasource via Spring. Here's one that uses JNDI:

<jee:jndi-lookup id="myDS" jndi-name="jdbc/myDS"/>

Here, we have created a new entity manager factory for our new persistence unit. Please note, all persistence units (even your additional persistence unit) are managed through the original blPersistenceUnitManager. You can use this approach to build in as many persistence units as you like.

<bean id="entityManagerFactoryMyPU" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="persistenceUnitManager" ref="blPersistenceUnitManager"/>
    <property name="persistenceUnitName" value="myPU"/>
    <property name="jpaVendorAdapter">
        <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
    </property>
</bean>

NOTE: Use the blPersistenceUnitManager and use it as factory to create more persistence units by adding persistence.xml



######### Caching #########
-> BLC uses Ehcache for caching purposes. For the caching to work we must use the id as "blCacheManager" to enable the BLC to
recognize this bean as cache manager and merge it with existing cache manager.
-> For this purpose the BLC uses its customized class for the caching purpose.


######### Database Configuration ##########
-> We have different files under the runtime-properties directory.

-> Each file has its own purpose. i.e. for example if you define necessary properties which are there in common-properties.xml
in integrationqa.properties and then select the build to be "integrationqa" HOW TO DO THIS??? NOT YET CLEAR.

Then in this case it would when deployed for integration environment, it will be able to use that configuration defined inside the
integrationqa.properties file. This feature provides flexibility on the environment switching.

->

########### MAIN ENTITIES #############
-> Product & SKU : Product to Sku (Relationship is like for a given Product there will be at least 1 Sku without this the product CAN NOT exists),
A product in broadleaf cannot exists without Sku, a Product always have atleast one default SKU associated with it.
    For example a T-Shirt is a product but with this product can have multiple sizes ("small", "medium" and "large") and multiple
    shades(blue", "yellow", "green") associated with it.

And hence for each combination there will be a SKU created and hence there will be 9 SKUs for this TShirt will be there.
All these Skus are related by ProductOptions and ProductOptionValues.

ProductOptions would be like: Color and Size, WHILE
ProductOptionValues would be like: Blue, Yellow, Red, Small, Large, Medium etc.
So in this way with this T-Shirt there would be 10 SKUs associated, 1 would be the DEFAULT ONE and other 9 would be like for different size and
color combinations.

WHY THIS STRUCTURE?
This structure allows various constraints around inventory and allows you the flexibility to specify the SPECIFIC PRICING FOR a PARTICULAR KIND OF
COMBINATION (i.e. SKU).


-> Sku: This entity has pricing information associated with it, It is the SKU which is sold/added to the cart.
   SKU is the concrete representation of a product and hence it has Size, Dimention etc.


-> (Order)Cart:
Order in broadleaf represent Completed order with associated payment details, shipping information, items,
- Order that is in PROCESS is a cart.
- Order that is in NAMED state is a wishlist.

### EXTENDING SERVICES:
-> WHEN EVER WE EXTEND ANY SERVICE WE NEED TO OVERRIDE THE "id" OF THAT SERVICE i.e AS SHOWN BELOW

Before our new service extension becomes active, we must first register it with Broadleaf Commerce.
Since we're extending the CartService, we need to override the key id "blCartService":

<bean id="blCartService" class="com.mycompany.order.service.MyCartServiceImpl"/>


Once this bean definition in place (i.e. in the application context), The broadleaf commerce will now instantiate the MyCartServiceImpl
as and when a cartService is required.

-> Caveat(WARNING): Most of the services in broadleaf uses the @Transactional to manage transactions, this means that spring will wrap the
service implementation within a JDK proxy, by default JDK proxies cast to their interfaces and not to their concrete implementation.

In the above mentioned case of MyCartServiceImpl if we try to cast it to MyCartServiceImpl it will throw a classcastexception.

-> This could be problematic if you are adding more methods to your implementation. Hence it would be advisable to create an interface MyCartService
add all the necessary methods in it and then use it in place when you want to inject the MyCartServiceImpl interface.


***** Enumerations *****
-> Broad leaf provides two data structures to store the enumeration like data, a BroadleafEnumerationType and DataDrivenEnumeration
    Both are just a collection of String values.

 ** BroadleafEnumerationType: This is used to provide predefined values in the Business Logic.
    An example of BroadleafEnumerationType is as follow:
        public class SomeType implements Serializable, BroadleafEnumerationType {

            public static final FulfillmentType DIGITAL = new FulfillmentType("DIGITAL", "Digital");
                public static final FulfillmentType PHYSICAL_SHIP = new FulfillmentType("PHYSICAL_SHIP", "Physical Ship");
                public static final FulfillmentType PHYSICAL_PICKUP = new FulfillmentType("PHYSICAL_PICKUP", "Physical Pickup");
                public static final FulfillmentType PHYSICAL_PICKUP_OR_SHIP = new FulfillmentType("PHYSICAL_PICKUP_OR_SHIP", "Physical Pickup or Ship");
                public static final FulfillmentType GIFT_CARD = new FulfillmentType("GIFT_CARD", "Gift Card");
                @Deprecated
                public static final FulfillmentType SHIPPING = new FulfillmentType("SHIPPING", "Shipping");

                public static FulfillmentType getInstance(final String type) {
                    return TYPES.get(type);
                }

                private String type;
                private String friendlyType;
        }

 ** DataDrivenEnumeration: This is used to provide the variable set of values inside the places like drop-down menus in the admin panel.
    An example of the DataDrivenEnumeration is as follow:
     This in contrast with the BroadleafEnumerationType, differs in this way, that the BroadleafEnumerationType consists of
     fixed set of hard coded values, while the values of the DataDrivenEnumerations are populated with values from the database.

   The admin console provides the configuration screen to create and edit the DataDrivenEnumeration.

@AdminPresentation is used for Styling and placing the field, while
@AdminPresentationDataDrivenEnumeration is used to specify that the field will be assigned a values from the specific
Subset of DataDrivenEnumerationValues values.

########### WORKFLOW #############
-> Broadleaf provides key phases for the default workflows such as:
    checkout, pricing, and cart operations etc.
-> All the work flows are defined in the Spring's application context file.
-> Following is the basic configuration for a sample workflow

         <!-- Pricing Workflow configuration -->
        <!-- FOLLOWING ARE THE ACTIVITIES WHICH WE WANT AS PART OF THE WORKFLOW -->
        <bean p:order="1000" id="blOfferActivity" class="org.broadleafcommerce.core.pricing.service.workflow.OfferActivity" />
        <bean p:order="2000" id="blConsolidateFulfillmentFeesActivity" class="org.broadleafcommerce.core.pricing.service.workflow.ConsolidateFulfillmentFeesActivity" />
        <bean p:order="3000" id="blFulfillmentItemPricingActivity" class="org.broadleafcommerce.core.pricing.service.workflow.FulfillmentItemPricingActivity" />
        <bean p:order="4000" id="blFulfillmentGroupMerchandiseTotalActivity" class="org.broadleafcommerce.core.pricing.service.workflow.FulfillmentGroupMerchandiseTotalActivity" />
        <bean p:order="5000" id="blFulfillmentGroupPricingActivity" class="org.broadleafcommerce.core.pricing.service.workflow.FulfillmentGroupPricingActivity" />
        <bean p:order="6000" id="blShippingOfferActivity" class="org.broadleafcommerce.core.pricing.service.workflow.ShippingOfferActivity" />
        <bean p:order="7000" id="blTaxActivity" class="org.broadleafcommerce.core.pricing.service.workflow.TaxActivity" />
        <bean p:order="8000" id="blTotalActivity" class="org.broadleafcommerce.core.pricing.service.workflow.TotalActivity" />
        <bean p:order="9000" id="blAdjustOrderPaymentsActivity" class="org.broadleafcommerce.core.pricing.service.workflow.AdjustOrderPaymentsActivity" />


        <!-- ACTUAL WORK FLOW -->
        <bean id="blPricingWorkflow" class="org.broadleafcommerce.core.workflow.SequenceProcessor">
            <property name="processContextFactory">
                <bean class="org.broadleafcommerce.core.pricing.service.workflow.PricingProcessContextFactory"/>
            </property>
            <property name="activities">
                <!-- A WORKFLOW IS CREATED USING STEPS/ACTIVITIES AS SHOWN BELOW. -->
                <list>
                    <ref bean="blOfferActivity" />
                    <ref bean="blConsolidateFulfillmentFeesActivity" />
                    <ref bean="blFulfillmentItemPricingActivity" />
                    <ref bean="blFulfillmentGroupMerchandiseTotalActivity" />
                    <ref bean="blFulfillmentGroupPricingActivity" />
                    <ref bean="blShippingOfferActivity" />
                    <ref bean="blTaxActivity" />
                    <ref bean="blTotalActivity"/>
                    <ref bean="blAdjustOrderPaymentsActivity"/>
                </list>
            </property>
            <property name="defaultErrorHandler">
                <bean class="org.broadleafcommerce.core.workflow.DefaultErrorHandler">
                    <property name="unloggedExceptionClasses">
                        <list>
                            <value>org.hibernate.exception.LockAcquisitionException</value>
                        </list>
                    </property>
                </bean>
            </property>
        </bean>
        <!-- Workflow configuration ends here -->

-> Every workflow is made up of many activities.
-> Every workflow is INSTANCE of the SEQUENCE PROCESSOR class in broadleaf.
-> This class manages the orderly activation of various activities as well as handling error states as and when they occur.
-> WORKFLOWS are CONFIGURED in 3 main areas PROCESS CONTEXT FACTORY, THE ACTIVITIES LIST and THE ROLL BACK HANDLER.
    Lets see each of these 1 by 1.

## PROCESS CONTEXT FACTORY:
-> What is ProcessContextFactory?
-> In each of the class implementing ProcessCOntextFactory we must set the property "processContextFactory".
-> All such classes are responsible for creating an instance of a class implementing "ProcessContext" interface.
-> In the example cconfiguration shown above we have used the PricingProcessContextFactory which in turn creates an instance of ProcessConext<Order>

=> ProcessContext are generally relevent for a particular type of process.
=> Each workflow has different type of ProcessContextFactory.
=> An immediate exception of this is the cart work flows (add, remove, update) are having same ProcessContext and hence uses the same ProcessContextFactory.
=>

## ACTIVITIES(The property defined in the above sample configuration)
-> This property must be filled with a list containing one or more Activities. Each Activity in the work flow is responsible for performing
a single unit of work for example (like calculating the Tax in the TaxActivity). Composite activities can contain subordinate workflows,
this allows one to create complex and nested workflows.

## ErrorHandler( passed in the property of "defaultErrorHandler")
-> The error handler is the error handler instance passed to the "defaultErrorHandler" property, by default we specify the "blDefaultErrorHandler"
-> The DEFAULT ERROR HANDLER (blDefaultErrorHandler) only serves the purpose of logging the exception out in the System.out and then bubbles the exception.
 and also stops the execution of activity.

## Activity Ordering (i.e. in the configuration the ordering is defined using the p:order)
-> the "p:order" will set the property "order" inside the Activity class.
-> In broadleaf each of the workflow defines activities order starting from 1000, this will allow us to insert multiple custom(our activities) in
between.
-> Now by any means if two of the activities defined in the configuration have same ordering in that case the activities will be arranges by using the
"in placing" that is the merging of the context defined in the "pathConfigLocation" in web.xml.
-> It would be a good idea to implemenet custom properties in the increment of 100s i.e. 3100, 3200 so that in future we can add more of the steps in
between.
-> All framework activity ordering can be overridden by referencing the bean id and changing the p:order attribute
-> NOTE: If you don't configure your activity(i.e. if you don't specify the p:order) then in that case the default order for activity would be at the
end (i.e. when an activity is created from BaseActivity which has the following order specified by default
    protected int order = Ordered.LOWEST_PRECEDENCE;


## RollBackHandlers:
-> Roll back handler allow an Activity to register its state and possibly roll back at the later stag.
-> RollbackHandlers can perform any kind of custom code as and can operate on the state of the Activity that is passed to it.
-> WHY ROLLBACK HANDLERS?
    In the workflow, the entire workflow doesn't consist of a single transaction instead activity wise it contains more transactions.
Now any error while executing any kind of activity doesn't mean that all the previous activities and the stuff done by them will be rolled back
we have to write this in the RollBackHandlers.

-> The roll back handlers are called for activities which are already COMPLETED SUCCESSFULLY, and NOT FOR THE ACTIVITY WHICH HAS FAILED currently.
-> It is the RESPONIBILITY OF AN APPLICATION TO RECTIFY ITS OWN STATE WHEN THE ACTIVITY FAILs.


## RollbackHandler Interface:
-> All the RollbackHandlers implements this interface.
-> This interface has following method:

public void rollbackState(Activity<? extends ProcessContext> activity, ProcessContext processContext, Map<String, Object> stateConfiguration)
    throws RollbackFailureException;

-> This method contains all the necessary information to perform the compensating transaction.
-> activity is the activity and processContext are provided, most imporatantly the stateConfiguration is also provided which contains the mapping
of state of activities along with the corrosponding activity.
-> This state information can be used for reversing the activities.

## ActivityStateManager:
-> Used for registering a Roll back handler and any accompanying state.
-> This can be called from anywhere in the flow of execution for a workflow.(Activity, Module, ErrorHandler, etc...)
-> To get the handle on the ActivityStateManager use following:
    ActivityStateManagerImpl.getStateManager();

-> "region" allows you to create the logic grouping of the rollback handlers.
-> By default one should register the roll back handlers manually, this is because by default a roll back handler would require a thread specific state
in order to achieve a viable rollback state.
-> In case of such viable rollback state is not required then in that case we can enable implicit registration of the RollbackHandlers.
    Example of automatic register roll back handler.
    <bean id="myActivity"
         class="com.test.MyActivity">
       <property name="rollbackHandler" ref="blTestRollbackHandler"/>
       <property name="stateConfiguration">
           <map>
               <entry key="testProperty" value="testValue"/>
           </map>
       </property>
       <property name="automaticallyRegisterRollbackHandler" value="true"/>
   </bean>

## Implicite Vs Explicite Rollback:
-> There might be cases where it is required, not to roll back everything instead it may be required to roll back a particular region in such cases
we can disable the default behavior of rolling back activity wise by changing the value of the following property to false.

    workflow.auto.rollback.on.error=false

## ProcessContext:
-> A common instance of Context which is passed in and out of the activity during the entire workflow.
-> The context contains the data pertaining to the workflow.
-> Each ProcessContext provides methods to check the state of the workflow, some of the methods are
    isStopped() or stopProcess() methods.

## Conditional Activity Execution:
-> Activity interface provides support for skipping that particular activity based on the items in the ProcessContext. This method is executed before
executing any Activity.

## Activity:
-> An ACTIVITY in its basic state is an instance of Activity interface, which provides various methods for executing the activity and retrieve the
error handlers. Most activity extends from the BaseActivity class.
-> Composite activity also extends from the BaseActivity

## Error Handlers:
->The default errorHandler just prints the exception to the System.out.
-> The error handler allows user to execute his/her particular code when an exception has occured.

##$$$$$ REMOVING A BROADLEAF WORKFLOW:
-> EmptySequenceProcess is used for removing any particular predefined workflow, as shown below
-> In order to remove the default checkoutWorkflow (which is NOT recommended) we should define it as follow.

    <bean id="blCheckoutWorkflow" class="org.broadleafcommerce.core.workflow.EmptySequenceProcessor" />

-> Some of the out of the box provided workflows are:
blAddItemWorkflow : Used when an item is added to the cart
blUpdateItemWorkflow : Used when an item is updated in the cart
blRemoveItemWorkflow : Used when an item is removed from the cart
blPricingWorkflow : Used by blPricingService (which is used by OrderService) to price an Order
blCheckoutWorkflow : Invoked by blCheckoutService in order to complete checkout for an Order (charge payments, decrement inventory, change status to SUBMITTED, etc)


###### CATALOG & SEARCH ######
-> THIS REQUIRES SOME PRIOR KNOWLEDGE TO SOLR, RECOMMENDED ACTION IS TO GET THE SOLR EXAMPLE READY AND THEN TRY THIS.

###### INVENTORY ######
->


###### PRICING ######
-> There exists a default workflow for Pricing.
-> "blPricingWorkflow" - this is the workflow name.
-> Pricing Shipping: following are the out of the box implementations provided to you in broadleaf.

    - Banded Price
    - Banded Weight
    - Fixed Price

    However we can include any third part pricing like FedEX, UPS etc.

*** Defining Terms:
 * FulfilmentOption (database):
    This simply means when you want delivery i.e. next-day, you want it by air, standard delivery or ground delivery?

 * FulFillmentType (Enum):
    This means Physical, In-Store pickup, digital delivery etc.

 * FulfillmentGroup (database):
    A grouping of OrderItems which are all shipped to the same location with same FulfillmentType.

    Consider a scenario where 1 customer orders 4 items all are to be supplied at 1 - Delhi, 2- Gujarat, 3- Hariyana,
    4-Rajasthan,
    1- is standard deliver
    2- Next-day
    3- Next-day
    4- Digital delivery

    This results in four distinct FulfillmentGroups.
    as the combination of location, speed and fulfillment types are different.

-> We can add new FulfillmentOption/Fulfillment Price band as shown above(Banded price etc) directly in the database using
some queries, refer the documentation link below for further details:

    http://www.broadleafcommerce.com/docs/core/current/broadleaf-concepts/pricing/shipping

    http://www.broadleafcommerce.com/docs/core/current/broadleaf-concepts


*** You can create a FulfillmentPricingProvider: Refer the broadleaf-concepts link under Pricing/Shipping


########## TAX ###########
-> Broadleaf can be configured for calculating tax in number of ways.
-> There are simple tax providers already available in broadleaf commerce.
    - blSimpleTaxProvider
    -
-> You can configure the tax rate using the postal code, as shown below.

    <bean id="blSimpleTaxProvider" class="org.broadleafcommerce.core.pricing.service.tax.provider.SimpleTaxProvider">
      <property name="itemPostalCodeTaxRateMap">
        <map>
          <entry key="75033" value=".085" />
          <entry key="75034" value=".085" />
        </map>
      </property>
      <property name="itemStateTaxRateMap">
        <map>
          <entry key="TX" value=".0825" />
        </map>
      </property>
    </bean>

    Here the tax rate of 8.25% is applied to the sale in given postcode.



-> The simple tax provider consists of following properties:
    Property 	                                Description
    defaultTaxRate 	                            A rate that would apply to every item in an order.
    defaultFulfillmentGroupTaxRate 	            Default rate to apply to shipping costs. Not typically used.
    itemPostalCodeTaxRateMap 	                A map of postal code to rate.
    itemCityTaxRateMap 	                        A map of city to rate.
    itemStateTaxRateMap 	                    A map of state to rate. System will match on the name or code.
    itemCountryTaxRateMap 	                    A map of country to rate. System will match on name or code.
    fulfillmentGroupPostalCodeTaxRateMap 	    A map of postal code to rate.
    fulfillmentGroupCityTaxRateMap 	            A map of city to rate.
    fulfillmentGroupStateTaxRateMap 	        A map of state to rate.
    fulfillmentGroupCountryTaxRateMap 	        A map of country to rate.

-> Creating a TaxProvider:
   - Tax providers are utilized by Broadleaf Commerce to interface with an external provider
    (or some custom algorithm) for tax calculation.
   - This TaxProvider interface has following methods:
        * calculateTaxForOrder(Order order, ModuleConfiguration config);
        * commitTaxForOrder(Order order, ModuleConfiguration config);
        * cancelTax(Order order, ModuleConfiguration config);

    ** ModuleConfiguration is the database entity.

#### Payment
-> Earlier payment module was dependent on the Core + Common
-> After version 3.1 it's now dependent only on the common, as common contains the REST Request and REST Response DTO classes
for the same.
-> Payment module is now dependent on the Common module of Broadleaf and Broadleaf's common module interacts with Broadleaf's
CORE module.
-> Broadleaf Commons contains the payment provider interfaces.

## Payment Gateway Interfaces:
-> PaymentGatewayConfiguration: This bean defines the parameters required for the configuration of a particular payment gateway.
-> PaymentGatewayConfigurationService: Each payment gateway module should configure an instance of this.
    In order to provide multiple payment gateways in the applications, instances defined of PaymentGatewayConfigurationService
    for differnt payment providers should be registered with the PaymentGatewayConfigurationServiceProvider instance.
-> PaymentGatewayCheckoutService: Generic Module to allow payment to be added to order.
-> PaymentGatewayCreditCardService: Payment providers allows you to manage customer/cards and allows you to create a transaction
    using tokenized customer/payment method. This might be an extra feature of the payment provider for which they will charge you.
-> PaymentGatewayCustomerService: Same as PaymentGatewayCreditCardService.
-> PaymentGatewayFraudService: This allows us to integrate fraud prevention APIs provided by the Payment gateways, this includes
additional validation on address etc.
-> PaymentGatewayHostedService: Certain payment gateways allow you to use a hosted solution i.e. they will redirect you to a page
    hosted by them, then they will capture all the details necessary and then records the transaction details.
-> PaymentGatewayReportingService: This interface allows us to fetch the details of the Transaction after the transaction is been
submitted to gateway.
-> PaymentGatewayRollbackService: This allows each module to provide its own implementation of roll back mechanisms.
-> PaymentGatewaySubscriptionService: Some gateways allows you to create form for recurring billing by creating subscription profile.
-> PaymentGatewayTamperProofSealService: Used to check whether the provided order id and Customer details have been tampered with
    or not, to use this one should call the verifySeal() method on the order id and customer id provided. This involves the concept of
    secret key of the merchant.
-> PaymentGatewayTransactionConfirmationService: This API is called by the checkout workflow in order to check whether the payment on
the transaction is confirmed/settled. In this case if an error occurs the workflow should invoke the rollback handlers.
-> PaymentGatewayTransactionService: This interface provides method to create the basic BILLABLE credit card transaction, and to make
    a server to server API call.
-> PaymentGatewayTransparentRedirectService: The purpose of this API is to create a hash or some secure token and place it in hidden
form on the html page, the submit on this form requires these elements to be POSTed to the payment gateway provider for further processing.

-> PaymentGatewayWebResponsePrintService: This is a utility which helps in transalting the Request parameters & Request attributes
 in the a single string. This is useful when setting the raw response fields on a PaymentResponseDTO.

-> PaymentGatewayWebResponseService: The purpose of this interface is to provide an API that will translate the RESPONSE comming from the
Payment Gateway to the PaymentResponseDTO.


##### Transaction Life Cycle:
-> Intial transaction state (in all cases) would be either AUTHORIZED or AUTHORIZED AND CAPTURE. this (either AUTHORIZED
or AUTHORIZED AND CAPTURE) is configurable using this method in PaymentGatewayConfigurationService.isConfigureAutorizedAndCapture()
if set to true then AUTHORIZED AND CAPTURE otherwise only AUTHORIZED.

-> Reverse Authorize, Capture, Void and Refund:
    a. Once a transaction initialized and sent to processor then it will have either AUTHORIZED or AUTHORIZED_CAPTURE state.
        (some gateway uses the term "Sale" to represent the same thing)
    b. From this point if a transaction is just authorized then you can either REVERSE AUTHORIZE or CAPTURE it.
    c. Once the transaction has been CAPTURED either from a capture request or from initially creating an authorized and capture request)
        there is a period where money hasn't left the Card Issuer's bank into the merchant's bank, this PHASE is known as the
        "BEING SUBMITTED FOR SETTLEMENT".
    d. DURING the phase of "BEING SUBMITTED FOR SETTLEMENT" a transaction can be "VOIDED".
    e. Once the fund transfer is completed the transaction is in the "SETTLED" state.
    f. Once the transaction is been "SETTLED" then and then only it can be "REFUNDED"

    The state terminology might get changed from one to another payment gateway.

#### Understanding the Payment Gateways:
-> Each of the payment gateway provider follows some pattern, there are interfaces in BLC which can be matched with these patterns
and find the appropriate one to use.
-> All completed orders should have at least 1 OrderPayment,
    This OrderPayment should have at least 1 confirmed and successful transaction of type AUTHORIZED or AUTHORIZED AND CAPTURE.

Broadleaf has some predefined payment types:

    Credit Card
    Gift Card
    Bank Account
    Check
    Electronic Check
    Wire
    Money Order
    Customer Credit
    Collect on delivery (can also be used for cash)
    Third Party Account (e.g. PayPal Express Checkout)

### Handling Payment Rollback Scenarios:
-> If by any means the payment needs to be rolled back then for each Payment provider integrations provided by the broadleaf
  contain an implementation of PaymentGatewayRollbackService, using this we can roll back any transaction for that payment provider.

### Payment Security and PCI Compliance:
-> We have to deal with PCI compliance if we are accessing the customer's credit card details, if we are not accessing anything related
to customer's credit card even remotely then we don't need to worry about PCI compliance. This is mostly provided to us by the payment
gateways.


### Encryption:
Currently the broadleaf doesn't provide that much effective implementation, the user may have to override the behavior for the
encryption,



<<<<<<<<<<<<<< BROADLEAF DEPENDENCY >>>>>>>>>>>>>>

 <!--Broadleaf libraries -->
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-common</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-profile</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-profile-web</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-framework</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-framework-web</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-admin-module</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-contentmanagement-module</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-open-admin-platform</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>broadleaf-menu</artifactId>
                <version>${blc.menu.version}</version>
                <type>jar</type>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>org.broadleafcommerce</groupId>
                <artifactId>integration</artifactId>
                <version>${blc.version}</version>
                <type>jar</type>
                <classifier>tests</classifier>
                <scope>test</scope>
            </dependency>





